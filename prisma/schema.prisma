generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Filmography {
  id          Int     @id @default(autoincrement())
  personId    Int
  releaseYear Int
  movieName   String  @db.VarChar(255)
  role        String? @db.VarChar(255)
  Person      Person  @relation(fields: [personId], references: [id], onDelete: Cascade, map: "Filmography_ibfk_1")

  @@index([personId], map: "Filmography_ibfk_1")
}

model Person {
  id           Int                 @id @default(autoincrement())
  lastName     String              @db.VarChar(255)
  firstName    String              @db.VarChar(255)
  cityOfLive   String              @db.VarChar(255)
  citizenship  String              @db.VarChar(255)
  education    String?             @db.VarChar(255)
  height       Int?
  weight       Int?
  lengthOfHair Int?
  colorOfEyes  String?             @db.VarChar(255)
  colorOfHair  String?             @db.VarChar(255)
  dateOfBirth  String?             @db.VarChar(255)
  avatar       String?             @db.VarChar(255)
  person_type  Person_type?
  sex          Person_sex
  phoneNumber  String?             @db.VarChar(255)
  nationality  String              @db.VarChar(255)
  favorites    Favorites[]
  filmography  Filmography[]
  orders       Order[]
  awards       PersonAwards[]
  image        PersonImage[]
  roles        PersonRoleMapping[]
  sckills      PersonSckills[]
  video        PersonVideo[]
  theater      theater[]
  personUsers  User[]              @relation("UserPerson")
}

model PersonRoleMapping {
  id       Int        @id @default(autoincrement())
  personId Int
  role     PersonRole
  Person   Person     @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId], map: "PersonRoleMapping_personId")
}

model PersonImage {
  id       Int    @id @default(autoincrement())
  personId Int
  src      String @db.VarChar(255)
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, map: "PersonImage_ibfk_1")

  @@index([personId], map: "userId")
}

model PersonVideo {
  id       Int    @id @default(autoincrement())
  personId Int
  src      String @db.VarChar(255)
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, map: "PersonVideo_ibfk_1")

  @@index([personId], map: "userId")
}

model theater {
  id          Int     @id @default(autoincrement())
  personId    Int
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  Person      Person  @relation(fields: [personId], references: [id], onDelete: Cascade, map: "theater_ibfk_1")

  @@index([personId], map: "theater_ibfk_1")
}

model PersonAwards {
  id       Int    @id @default(autoincrement())
  personId Int
  name     String @db.VarChar(255)
  value    String @db.VarChar(255)
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, map: "PersonAwards_ibfk_1")

  @@index([personId], map: "PersonAwards_ibfk_1")
}

model PersonSckills {
  id       Int    @id @default(autoincrement())
  personId Int
  name     String @db.VarChar(255)
  value    String @db.VarChar(255)
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, map: "PersonSckills_ibfk_1")

  @@index([personId], map: "personId")
}

model User {
  id              Int                @id @default(autoincrement())
  name            String?            @db.VarChar(255)
  email           String             @unique(map: "email") @db.VarChar(255)
  password        String             @db.VarChar(255)
  role            User_role?         @default(USER)
  avatar          String?            @db.VarChar(255)
  provider        String?            @default("email") @db.VarChar(255)
  commentReply    CommentReply[]
  favorites       Favorites[]
  comments        NewsComment[]
  newsCommentLike NewsCommentLike[]
  newsLikes       NewsLikes[]
  newsViews       NewsViews[]
  orders          Order[]
  resetCodes      PasswordResetCode?
  userPersons     Person[]           @relation("UserPerson")
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int
  createdAt   DateTime     @default(now())
  personId    Int
  orderStatus OrderStatus? @default(PENDING)
  message     String       @db.Text
  phoneNumber String       @db.VarChar(255)
  read        Boolean?     @default(false)
  senderName  String       @db.VarChar(255)
  person      Person       @relation(fields: [personId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([personId], map: "Order_personId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model Favorites {
  id         Int     @id @default(autoincrement())
  userId     Int
  isFavorite Boolean @default(false)
  personId   Int
  person     Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, personId])
  @@index([personId], map: "Favorites_personId_fkey")
}

model PasswordResetCode {
  id        Int      @id @default(autoincrement())
  email     String   @unique(map: "email") @db.VarChar(255)
  code      String
  expiresAt DateTime
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade, map: "PasswordResetCode_ibfk_1")
}

model News {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String        @db.VarChar(255)
  poster      String?       @db.VarChar(255)
  sourceNews  String?       @db.VarChar(255)
  createdAt   DateTime      @default(now())
  dislikes    Int           @default(0)
  likes       Int           @default(0)
  views       Int           @default(0)
  comments    NewsComment[]
  newsLikes   NewsLikes[]
  newsViews   NewsViews[]
}

model FAQ {
  id       Int    @id @default(autoincrement())
  question String @db.Text
  answer   String @db.Text
}

model NewsComment {
  id              Int               @id @default(autoincrement())
  newsId          Int
  userId          Int
  text            String            @db.Text
  likes           Int               @default(0)
  dislikes        Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @db.DateTime(0)
  replies         CommentReply[]  @relation("CommentToReplies") 
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, map: "NewsComment_ibfk_1")
  news            News              @relation(fields: [newsId], references: [id], onDelete: Cascade, map: "NewsComment_ibfk_2")
  newsCommentLike NewsCommentLike[]

  @@index([userId], map: "NewsComment_ibfk_1")
  @@index([newsId], map: "newsId")
}

model NewsCommentLike {
  userId      Int
  commentId   Int?
  replyId     Int?
  isLike      Boolean     @default(false)
  isDislike   Boolean     @default(false)
  id          Int         @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsComment NewsComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  replies CommentReply? @relation(fields: [replyId],references: [id] ,onDelete: Cascade,name:"ReplyLikes")

  @@unique([userId, commentId], name: "user_comment_unique") 
  @@unique([userId, replyId], name: "user_reply_unique")
  @@index([replyId],map:"NewsCommentReplyLike_ibfk_2")
  @@index([commentId], map: "NewsCommentLike_ibfk_2")
}

model NewsLikes {
  id        Int     @id @default(autoincrement())
  userId    Int
  newsId    Int
  isLike    Boolean @default(false)
  isDislike Boolean @default(false)
  news      News    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, newsId], map: "NewsLike_user_news_unique")
  @@index([newsId], map: "NewsLikes_ibfk_2")
}

model NewsViews {
  id     Int  @id @default(autoincrement())
  userId Int
  newsId Int
  views  Int  @default(0)
  news   News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, newsId], map: "NewsViews_user_views_unique")
  @@index([newsId], map: "NewsViews_ibfk_2")
}

model CommentReply {
  id          Int         @id @default(autoincrement())
  userId      Int
  commentId   Int
  text        String      @db.Text
  likes       Int         @default(0)
  dislikes    Int         @default(0)
  newsReplyLikes NewsCommentLike[]   @relation("ReplyLikes")
  createdAt   DateTime    @default(now()) @db.DateTime(0)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsComment NewsComment @relation(fields: [commentId], references: [id], onDelete: Cascade,name:"CommentToReplies")

  @@index([commentId], map: "commentId")
  @@index([userId], map: "userId")
}

enum PersonRole {
  PRODUCTION_DESIGNER
  EXECUTIVE_PRODUCER
  DIRECTOR
  PRODUCER
  DIRECTOR_OF_PHOTOGRAPHY
  ACTORS
  SOUND_DESIGNER
  EDITOR
  GAFFER
  LINE_PRODUCER
  ASSISTANT_DIRECTOR
  COSTUME_DESIGNER
  CAMERA_OPERATOR
  STUNT_PERFORMERS
  COMPOSER
  GRIP
  ASSISTANT_EDITOR
  SOUND_OPERATOR
  SECOND_UNIT_DIRECTOR
  MAKEUP_ARTIST
  STEADICAM_OPERATOR
  STUNT_DOUBLE
  COLORIST
  ASSISTANTS
  EDITORS_DIRECTOR
  CAMERA_ASSISTANT
  TRANSPORTATION_COORDINATOR
  EXTRA_CROWD
  DRONE_OPERATOR
  SCREENWRITERS
}

enum Person_sex {
  MALE
  FEMALE
}

enum User_role {
  USER
  ADMIN
}

enum Person_type {
  AMATEUR
  PROFESSIONAL
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
